---

- name: copy openssh-lpk schema file
  copy:
    src: openssh-lpk
    dest: "{{ openldap_server_app_path }}/schema/openssh-lpk.schema"
    mode: 0644
  notify: slapd rebuild
  when:
    - openldap_server_enable_sshkeys

- name: copy samba ldap schema file
  copy:
    src: samba.schema
    dest: "{{ openldap_server_app_path }}/schema/samba.schema"
    mode: 0644
  notify: slapd rebuild
  when:
    - openldap_server_enable_samba

- name: copy autofs schema file
  copy:
    src: autofs.schema
    dest: "{{ openldap_server_app_path }}/schema/autofs.schema"
    mode: 0644
  notify: slapd rebuild
  when:
    - openldap_server_enable_autofs

- name: Check for ldap root password change
  copy:
    dest: "{{ openldap_server_app_path }}/rootpw_configured"
    content: "{{ openldap_server_rootpw | checksum }}"
  register: rootpw_updated

- name: Generate the root password for ldap
  shell: "slappasswd -s {{ openldap_server_rootpw }}"
  register: root_password
  when: rootpw_updated is changed
  no_log: True

- name: Copy the slapd.conf configuration file for Redhat
  template:
    src: slapd.conf.j2
    dest: "{{ openldap_server_app_path }}/slapd.conf"
  when:
    - ansible_os_family == "RedHat"
    - rootpw_updated is changed
  notify: slapd rebuild

- name: Copy the slapd.conf configuration file for Ubuntu
  template:
    src: slapd.conf_ubuntu.j2
    dest: "{{ openldap_server_app_path }}/slapd.conf"
  when:
    - ansible_os_family == "Debian"
    - rootpw_updated is changed
  notify: slapd rebuild

- name: Copy the ldap.conf configuration file
  template:
    src: ldap.conf.j2
    dest: "{{ openldap_server_app_path }}/ldap.conf"
  notify: restart slapd

- name: Create the directory for ldap database
  file:
    path: "/var/lib/ldap/{{ openldap_server_fqdn }}"
    state: directory
    owner: "{{ openldap_server_user }}"
    group: "{{ openldap_server_user }}"

#- name: copy DB_CONFIG
#  template:
#    src: db_config.j2
#    dest: "/var/lib/ldap/{{ openldap_server_fqdn }}/DB_CONFIG"
#    mode: 0644
#  notify: slapd rebuild

- import_tasks: ldap_tls_configure.yml
  when:
    - openldap_server_enable_tls
  tags:
    - openldap-tls

#- name: Slurp ssl data from remote host
#  block:
#    - name: slurp latest ssl key contents
#      slurp:
#        src: "{{ ssl_key_slurp_path }}"
#      register: ssl_key_contents
#      delegate_to: "{{ ssl_slurp_remote_host }}"
#      delegate_facts: true
#
#    - name: set encoded ssl key contents as fact for later processing
#      set_fact:
#        encoded_ssl_key: "{{ ssl_key_contents['content'] }}"
#
#    - name: slurp latest ssl certificate chain contents
#      slurp:
#        src: "{{ ssl_cert_slurp_path }}"
#      register: ssl_cert_contents
#      delegate_to: "{{ ssl_slurp_remote_host }}"
#      delegate_facts: true
#
#    - name: set encoded ssl cert contents as fact for later processing
#      set_fact:
#        encoded_ssl_cert: "{{ ssl_cert_contents['content'] }}"
#
#    - name: set decoded ssl key and cert chain as fact for future tasks
#      set_fact:
#        ssl_privkey: "{{ encoded_ssl_key | b64decode }}"
#        ssl_certchain: "{{ encoded_ssl_cert | b64decode }}"
#
#    - name: print decoded ssl key and certificate chain for debugging
#      debug:
#        msg: |
#          SSL private key: {{ ssl_privkey }}
#          SSL certificate chain: {{ ssl_certchain }}
#        verbosity: 1
#
#    - name: Create the directory for ldap certificates
#      file:
#        path: "{{ openldap_server_app_path }}/certs"
#        state: directory
#        owner: "{{ openldap_server_user }}"
#        group: "{{ openldap_server_user }}"
#      notify:
#        - restart slapd
#
#    - name: "Install SSL Key"
#      copy:
#        content: "{{ ssl_privkey }}"
#        dest: "{{ ssl_keypath }}"
#        owner: "{{ openldap_server_user }}"
#        group: "{{ openldap_server_group }}"
#        mode: 0600
#      notify:
#        - restart slapd
#
#    - name: "Install SSL Certificate Chain"
#      copy:
#        content: "{{ ssl_certchain }}"
#        dest: "{{ ssl_certpath }}"
#        owner: "{{ openldap_server_user }}"
#        group: "{{ openldap_server_group }}"
#        mode: 0640
#      notify:
#        - restart slapd
#  when:
#    - openldap_server_enable_ssl
#    - slurp_ssl_keys_from_remote|default(False)
#    - ssl_slurp_remote_host|length > 0
#    - ssl_cert_slurp_path|length > 0
#    - ssl_key_slurp_path|length > 0
#  tags:
#    - openldap-ssl

- name: copy the /etc/default/slapd for RedHat
  copy:
    src: ldap
    dest: /etc/sysconfig/ldap
    mode: 0755
  when: openldap_server_enable_ssl and ansible_os_family == 'RedHat'
  notify:
    - restart slapd

- name: copy /etc/sysconfig/slapd for Fedora
  copy:
    src: slapd_fedora
    dest: /etc/sysconfig/slapd
    mode: 0755
  when: openldap_server_enable_ssl and ansible_distribution == "Fedora"
  notify:
    - restart slapd

- name: copy /etc/default/slapd for Ubuntu
  copy:
    src: slapd
    dest: /etc/default/slapd
    mode: 0755
  when: openldap_server_enable_ssl and ansible_os_family == 'Debian'
  notify:
    - restart slapd

- meta: flush_handlers

- name: stop slapd
  service:
    name: slapd
    state: stopped
  when: slapd_rebuild | default(False)

- name: Delete the ldap database
  file:
    path: /var/lib/ldap/{{ openldap_server_fqdn }}"
    state: absent
  when: slapd_rebuild | default(False)

- name: Recreate the ldap database directory
  file:
    path: "/var/lib/ldap/{{ openldap_server_fqdn }}"
    state: directory
    owner: "{{ openldap_server_user }}"
    group: "{{ openldap_server_user }}"
  when: slapd_rebuild | default(False)

- name: Delete the ldap configuration directory
  file:
    path: "{{ openldap_server_app_path }}/slapd.d"
    state: absent
  when: slapd_rebuild | default(False)

- name: restart slapd
  service:
    name: slapd
    state: restarted
  when: slapd_rebuild | default(False)

- name: Recreate the ldap configuration directory
  file:
    path: "{{ openldap_server_app_path }}/slapd.d"
    state: directory
    owner: openldap
    group: openldap
  when: slapd_rebuild | default(False)

- name: Rebuild slapd OLC Directory
  shell: "slaptest -f {{ openldap_server_app_path }}/slapd.conf -F {{ openldap_server_app_path }}/slapd.d"
  when: slapd_rebuild | default(False)

- name: fix slapd.d permissions
  file:
    path: "{{ openldap_server_app_path }}/slapd.d"
    state: directory
    recurse: yes
    owner: openldap
    group: openldap
  when: slapd_rebuild | default(False)

- name: restart slapd
  service:
    name: slapd
    state: restarted
    enabled: yes
  when: slapd_rebuild | default(False)

- name: Copy the template for creating base dn
  template:
    src: "{{ openldap_server_ldif }}"
    dest: /tmp/
  register: rootdn

- name: Print rootdn variable info for debugging
  debug:
    var: rootdn
    verbosity: 1
  when: rootdn is defined

- name: add the base domain
  shell:
    cmd: >
      ldapadd -x -D "cn=Manager,{{ openldap_server_dc }}" -w {{ openldap_server_rootpw }}
      -f {{ rootdn.dest|default( '/tmp/' ~ openldap_server_ldif ) }} && touch {{ openldap_server_app_path }}/rootdn_created
    creates: "{{ openldap_server_app_path }}/rootdn_created"

- name: Copy the template for creating samba indices
  copy:
    src: samba_indices.ldif
    dest: /tmp/
  register: smbindices
  when:
    - openldap_server_enable_samba

- name: add the samba indices
  shell: >
    ldapmodify -x -D "cn=admin,cn=config" -w {{ openldap_server_rootpw }}
    -f {{ smbindices.dest|default( '/tmp/samba_indices.ldif' ) }} && touch {{ openldap_server_app_path }}/smbindices_created
  args:
    creates: "{{ openldap_server_app_path }}/smbindices_created"
  when:
    - openldap_server_enable_samba

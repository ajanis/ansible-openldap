---
- name: Gather and delegate facts for all Ceph nodes
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  loop: "{{ groups['ceph'] }}"
  run_once: true
  when:
    - storage_backend == "cephfs"
- name: Gather and delegate facts for all NFS nodes
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  loop: "{{ groups['nfsservers'] }}"
  run_once: true
  when:
    - storage_backend == "nfs"
- name: Admin OU
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "{{ admin_ou }}"
    objectClass:
      - top
      - organizationalUnit
    attributes:
      ou: admin
    state: present
  notify:
    - restart_ns_daemons

- name: Automount OU
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "{{ automount_ou }}"
    objectClass:
      - top
      - organizationalUnit
    attributes:
      ou: automount
    state: present
  notify:
    - restart_ns_daemons

- name: auto.master OU
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "{{ auto_master_ou }}"
    objectClass:
      - top
      - automountMap
    attributes:
      ou: auto.master
    state: present
  notify:
    - restart_ns_daemons

- name: CephFS data automount CN
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn=/-,{{ auto_master_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: "/-"
      automountInformation: "ldap:ou=auto.data,ou=automount,ou=admin,{{ openldap_server_dc }} --ghost"
    state: absent
  notify:
    - restart_ns_daemons
  when: storage_backend == "cephfs"

- name: NFS data automount CN
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn={{ data_mount_root }},{{ auto_master_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: "{{ data_mount_root }}"
      automountInformation: "ldap:ou=auto.data,ou=automount,ou=admin,{{ openldap_server_dc }} --ghost"
    state: absent
  notify:
    - restart_ns_daemons
  when: storage_backend == "nfs"

- name: auto.data OU
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "{{ auto_data_ou }}"
    objectClass:
      - top
      - automountMap
    attributes:
      ou: auto.data
    state: present
  notify:
    - restart_ns_daemons

- name: CephFS Data Directory CNs
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn={{ data_mount_root }},{{ auto_data_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: "{{ data_mount_root }}"
      automountInformation: "-fstype=ceph,{{ cephfs_mount_options }} {% for host in groups['mons'] %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}:6789{% if not loop.last %},{% endif %}{% endfor %}:/"
    state: absent
  notify:
    - restart_ns_daemons
  when: storage_backend == "cephfs"

#- name: Update CephFS Data Directory CN if needed
#  community.general.ldap_attrs:
#    dn: "cn={{ data_mount_root }},{{ auto_data_ou }}"
#    name: "automountInformation"
#    values: "-fstype=ceph,name={{  cephfs_user }},secret={{ vault_cephfs_user_key }},noatime,_netdev {% for host in groups['mons'] %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}:6789{% if not loop.last %},{% endif %}{% endfor %}:/"
#    state: exact
#    bind_dn: "{{ openldap_server_bind_dn }}"
#    bind_pw: "{{ openldap_server_rootpw }}"
#  notify:
#    - restart_ns_daemons
#  when:
#    - storage_backend == "cephfs"

- name: NFS Data Directory CNs
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn={{ item.key }},{{ auto_data_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: "{{ item.key }}"
      automountInformation: "-fstype=nfs,{{ item.value.mount_opts }} {{ nfs_server_ip }}:{{ item.value.nfs_export }}"
    state: present
  notify:
    - restart_ns_daemons
  loop: "{{ nfs_exports|default({})|dict2items }}"
  when: storage_backend == "nfs"
  loop_control:
    label: "{{ item.key }}"

- name: Update NFS Data Directory CNs if needed
  community.general.ldap_attrs:
    dn: "cn={{ item.key }},{{ auto_data_ou }}"
    attributes:
      automountInformation: "-fstype=nfs,{{ item.value.mount_opts }} {{ nfs_server_ip }}:{{ item.value.nfs_export }}"
    state: exact
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
  loop: "{{ nfs_exports|default({})|dict2items }}"
  notify:
    - restart_ns_daemons
  when:
    - storage_backend == "nfs"
  loop_control:
    label: "{{ item.key }}"

- name: Home automount CN
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn=/home,{{ auto_master_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: /home
      automountInformation: "ldap:ou=auto.home,ou=automount,ou=admin,{{ openldap_server_dc }} --timeout=60 --ghost"
    state: present
  notify:
    - restart_ns_daemons

- name: auto.home OU
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "{{ auto_home_ou }}"
    objectClass:
      - top
      - automountMap
    attributes:
      ou: auto.home
    state: present
  notify:
    - restart_ns_daemons

- name: User Directory CNs
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn={{ item.key }},{{ auto_home_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: "{{ item.key }}"
      automountInformation: "-fstype=ceph,{{ cephfs_mount_options }} {% for host in groups['mons'] %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}:6789{% if not loop.last %},{% endif %}{% endfor %}:/{{ ldap_user_home_directory }}/{{ item.key }}"
    state: present
  notify:
    - restart_ns_daemons
  loop: "{{ ssh_users|default({})|dict2items }}"
  when: storage_backend == "cephfs"
  loop_control:
    label: "{{ item.key }}"

- name: Update User home directory CNs if needed
  community.general.ldap_attrs:
    dn: "cn={{ item.key }},{{ auto_home_ou }}"
    attributes:
      automountInformation: "-fstype=ceph,{{ cephfs_mount_options }} {% for host in groups['mons'] %}{{ hostvars[host]['ansible_default_ipv4']['address'] }}:6789{% if not loop.last %},{% endif %}{% endfor %}:/{{ ldap_user_home_directory }}/{{ item.key }}"
    state: exact
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
  loop: "{{ ssh_users|default({})|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - restart_ns_daemons
  when:
    - storage_backend == "cephfs"
    - ssh_users is defined
    - ssh_users != None

- name: create user home directories
  file:
    state: directory
    path: "{{ data_mount_root }}/{{ ldap_user_home_directory }}/{{ item.key }}"
    owner: "{{ item.value.uid }}"
    group: "{{ item.value.gid }}"
    mode: 0755
  loop: "{{ ssh_users|default({})|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: storage_backend == "nfs"

- name: User Directory CNs
  ldap_entry:
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
    dn: "cn={{ item.key }},{{ auto_home_ou }}"
    objectClass:
      - top
      - automount
    attributes:
      cn: "{{ item.key }}"
      automountInformation: "-fstype=nfs,{{ nfs_exports.homedirs.mount_opts }} {{ nfs_server_ip }}:{{ nfs_exports.homedirs.nfs_export }}/{{ item.key }}"
    state: present
  notify:
    - restart_ns_daemons
  loop: "{{ ssh_users|default({})|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: storage_backend == "nfs"

- name: Update NFS user home directory exports if needed
  community.general.ldap_attrs:
    dn: "cn={{ item.key }},{{ auto_home_ou }}"
    attributes:
      automountInformation: "-fstype=nfs,{{ nfs_exports.homedirs.mount_opts }} {{ nfs_server_ip }}:{{ nfs_exports.homedirs.nfs_export }}/{{ item.key }}"
    state: exact
    bind_dn: "{{ openldap_server_bind_dn }}"
    bind_pw: "{{ openldap_server_rootpw }}"
  loop: "{{ ssh_users|default({})|dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - restart_ns_daemons
  when:
    - storage_backend == "nfs"
- meta: flush_handlers
